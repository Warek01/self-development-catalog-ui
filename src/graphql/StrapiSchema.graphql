# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

union GenericMorph = Blog | BlogCategory | ComponentPageComponentAbout | ComponentPageComponentHome | ComponentSharedSeo | ComponentSharedSeoImage | ComponentUtilsLink | ComponentUtilsTechnology | I18NLocale | Page | PageSeo | SocialMedia | UploadFile | UploadFolder | UsefulResource | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

union PagePropsDynamicZone = ComponentPageComponentAbout | ComponentPageComponentHome | Error

type Blog {
  blog_categories(filters: BlogCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogCategoryRelationResponseCollection
  content: String
  createdAt: DateTime
  date: Date!
  links(filters: ComponentUtilsLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUtilsLink]
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type BlogCategory {
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogRelationResponseCollection
  color: String
  createdAt: DateTime
  icon: UploadFileEntityResponse!
  publishedAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type BlogCategoryEntity {
  attributes: BlogCategory
  id: ID
}

type BlogCategoryEntityResponse {
  data: BlogCategoryEntity
}

type BlogCategoryEntityResponseCollection {
  data: [BlogCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

type BlogCategoryRelationResponseCollection {
  data: [BlogCategoryEntity!]!
}

type BlogEntity {
  attributes: Blog
  id: ID
}

type BlogEntityResponse {
  data: BlogEntity
}

type BlogEntityResponseCollection {
  data: [BlogEntity!]!
  meta: ResponseCollectionMeta!
}

type BlogRelationResponseCollection {
  data: [BlogEntity!]!
}

type ComponentPageComponentAbout {
  authorDescription: String
  authorTechnologies(filters: ComponentUtilsTechnologyFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUtilsTechnology]
  authorTitle: String
  id: ID!
  projectDescription: String
  projectTechnologies(filters: ComponentUtilsTechnologyFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentUtilsTechnology]
  projectTitle: String
  repoLink: String
}

type ComponentPageComponentHome {
  id: ID!
  welcomeImage: UploadFileEntityResponse
  welcomeText: String!
}

type ComponentSharedSeo {
  description: String
  id: ID!
  image: ComponentSharedSeoImage
  keywords: String!
  link: String
  ogLink: String
  preventIndexing: Boolean
  robots: String
  title: String!
  twitterLink: String
}

type ComponentSharedSeoImage {
  altText: String
  id: ID!
  media: UploadFileEntityResponse
}

type ComponentUtilsLink {
  id: ID!
  link: String!
  text: String!
}

type ComponentUtilsTechnology {
  id: ID!
  image: UploadFileEntityResponse!
  link: String
  title: String!
}

type Error {
  code: String!
  message: String
}

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

type Mutation {
  "Change user password. Confirm with the current password."
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createBlog(data: BlogInput!): BlogEntityResponse
  createBlogCategory(data: BlogCategoryInput!): BlogCategoryEntityResponse
  createPage(data: PageInput!): PageEntityResponse
  createPageSeo(data: PageSeoInput!): PageSeoEntityResponse
  createSocialMedia(data: SocialMediaInput!): SocialMediaEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
  createUsefulResource(data: UsefulResourceInput!): UsefulResourceEntityResponse
  "Create a new role"
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload
  "Create a new user"
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteBlog(id: ID!): BlogEntityResponse
  deleteBlogCategory(id: ID!): BlogCategoryEntityResponse
  deletePage(id: ID!): PageEntityResponse
  deletePageSeo(id: ID!): PageSeoEntityResponse
  deleteSocialMedia(id: ID!): SocialMediaEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse
  deleteUsefulResource(id: ID!): UsefulResourceEntityResponse
  "Delete an existing role"
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload
  "Delete an existing user"
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
  "Confirm an email users email address"
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
  "Request a reset password token"
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!
  "Register a user"
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse
  "Reset user password. Confirm with a code (resetToken from forgotPassword)"
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateBlog(data: BlogInput!, id: ID!): BlogEntityResponse
  updateBlogCategory(data: BlogCategoryInput!, id: ID!): BlogCategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updatePage(data: PageInput!, id: ID!): PageEntityResponse
  updatePageSeo(data: PageSeoInput!, id: ID!): PageSeoEntityResponse
  updateSocialMedia(data: SocialMediaInput!, id: ID!): SocialMediaEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse
  updateUsefulResource(data: UsefulResourceInput!, id: ID!): UsefulResourceEntityResponse
  "Update an existing role"
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload
  "Update an existing user"
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Page {
  createdAt: DateTime
  props: [PagePropsDynamicZone]
  publishedAt: DateTime
  seo: PageSeoEntityResponse
  slug: String!
  updatedAt: DateTime
}

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

type PageSeo {
  createdAt: DateTime
  data: ComponentSharedSeo!
  publishedAt: DateTime
  slug: String!
  updatedAt: DateTime
}

type PageSeoEntity {
  attributes: PageSeo
  id: ID
}

type PageSeoEntityResponse {
  data: PageSeoEntity
}

type PageSeoEntityResponseCollection {
  data: [PageSeoEntity!]!
  meta: ResponseCollectionMeta!
}

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

type Query {
  blog(id: ID): BlogEntityResponse
  blogCategories(filters: BlogCategoryFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogCategoryEntityResponseCollection
  blogCategory(id: ID): BlogCategoryEntityResponse
  blogs(filters: BlogFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BlogEntityResponseCollection
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  me: UsersPermissionsMe
  page(id: ID): PageEntityResponse
  pageSeo(id: ID): PageSeoEntityResponse
  pageSeos(filters: PageSeoFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageSeoEntityResponseCollection
  pages(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  socialMedia(id: ID): SocialMediaEntityResponse
  socialMedias(filters: SocialMediaFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): SocialMediaEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usefulResource(id: ID): UsefulResourceEntityResponse
  usefulResources(filters: UsefulResourceFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): UsefulResourceEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type SocialMedia {
  createdAt: DateTime
  link: String!
  platform: ENUM_SOCIALMEDIA_PLATFORM!
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type SocialMediaEntity {
  attributes: SocialMedia
  id: ID
}

type SocialMediaEntityResponse {
  data: SocialMediaEntity
}

type SocialMediaEntityResponseCollection {
  data: [SocialMediaEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsefulResource {
  createdAt: DateTime
  description: String!
  link: String!
  publishedAt: DateTime
  title: String!
  updatedAt: DateTime
}

type UsefulResourceEntity {
  attributes: UsefulResource
  id: ID
}

type UsefulResourceEntityResponse {
  data: UsefulResourceEntity
}

type UsefulResourceEntityResponseCollection {
  data: [UsefulResourceEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}

enum ENUM_SOCIALMEDIA_PLATFORM {
  discord
  facebook
  github
  gitlab
  instagram
  linkedIn
  web
}

enum PublicationState {
  LIVE
  PREVIEW
}

"A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar PagePropsDynamicZoneInput

"The `Upload` scalar type represents a file upload."
scalar Upload

input BlogCategoryFiltersInput {
  and: [BlogCategoryFiltersInput]
  blogs: BlogFiltersInput
  color: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: BlogCategoryFiltersInput
  or: [BlogCategoryFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BlogCategoryInput {
  blogs: [ID]
  color: String
  icon: ID
  publishedAt: DateTime
  slug: String
  title: String
}

input BlogFiltersInput {
  and: [BlogFiltersInput]
  blog_categories: BlogCategoryFiltersInput
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  date: DateFilterInput
  id: IDFilterInput
  links: ComponentUtilsLinkFiltersInput
  not: BlogFiltersInput
  or: [BlogFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BlogInput {
  blog_categories: [ID]
  content: String
  date: Date
  links: [ComponentUtilsLinkInput]
  publishedAt: DateTime
  slug: String
  title: String
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

input ComponentSharedSeoFiltersInput {
  and: [ComponentSharedSeoFiltersInput]
  description: StringFilterInput
  image: ComponentSharedSeoImageFiltersInput
  keywords: StringFilterInput
  link: StringFilterInput
  not: ComponentSharedSeoFiltersInput
  ogLink: StringFilterInput
  or: [ComponentSharedSeoFiltersInput]
  preventIndexing: BooleanFilterInput
  robots: StringFilterInput
  title: StringFilterInput
  twitterLink: StringFilterInput
}

input ComponentSharedSeoImageFiltersInput {
  altText: StringFilterInput
  and: [ComponentSharedSeoImageFiltersInput]
  not: ComponentSharedSeoImageFiltersInput
  or: [ComponentSharedSeoImageFiltersInput]
}

input ComponentSharedSeoImageInput {
  altText: String
  id: ID
  media: ID
}

input ComponentSharedSeoInput {
  description: String
  id: ID
  image: ComponentSharedSeoImageInput
  keywords: String
  link: String
  ogLink: String
  preventIndexing: Boolean
  robots: String
  title: String
  twitterLink: String
}

input ComponentUtilsLinkFiltersInput {
  and: [ComponentUtilsLinkFiltersInput]
  link: StringFilterInput
  not: ComponentUtilsLinkFiltersInput
  or: [ComponentUtilsLinkFiltersInput]
  text: StringFilterInput
}

input ComponentUtilsLinkInput {
  id: ID
  link: String
  text: String
}

input ComponentUtilsTechnologyFiltersInput {
  and: [ComponentUtilsTechnologyFiltersInput]
  link: StringFilterInput
  not: ComponentUtilsTechnologyFiltersInput
  or: [ComponentUtilsTechnologyFiltersInput]
  title: StringFilterInput
}

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

input PageFiltersInput {
  and: [PageFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  publishedAt: DateTimeFilterInput
  seo: PageSeoFiltersInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PageInput {
  props: [PagePropsDynamicZoneInput!]
  publishedAt: DateTime
  seo: ID
  slug: String
}

input PageSeoFiltersInput {
  Title: StringFilterInput
  and: [PageSeoFiltersInput]
  createdAt: DateTimeFilterInput
  data: ComponentSharedSeoFiltersInput
  id: IDFilterInput
  not: PageSeoFiltersInput
  or: [PageSeoFiltersInput]
  publishedAt: DateTimeFilterInput
  slug: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PageSeoInput {
  Title: String
  data: ComponentSharedSeoInput
  publishedAt: DateTime
  slug: String
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

input SocialMediaFiltersInput {
  and: [SocialMediaFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  link: StringFilterInput
  not: SocialMediaFiltersInput
  or: [SocialMediaFiltersInput]
  platform: StringFilterInput
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input SocialMediaInput {
  link: String
  platform: ENUM_SOCIALMEDIA_PLATFORM
  publishedAt: DateTime
  title: String
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

input UsefulResourceFiltersInput {
  and: [UsefulResourceFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  link: StringFilterInput
  not: UsefulResourceFiltersInput
  or: [UsefulResourceFiltersInput]
  publishedAt: DateTimeFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input UsefulResourceInput {
  description: String
  link: String
  publishedAt: DateTime
  title: String
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}
